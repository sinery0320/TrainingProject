
// Wizard-generated connection point proxy class
// WARNING: This file may be regenerated by the wizard


#pragma once

template<class T>
class CProxyIOPCDataCallback :
	public ATL::IConnectionPointImpl<T, &__uuidof(IOPCDataCallback)>
{
public:
    // CProxyIOPCDataCallback::Fire_OnDataChange - Fire client's OnDataChange function.
	HRESULT Fire_OnDataChange(DWORD dwTransid, OPCHANDLE hGroup, HRESULT hrMasterquality, HRESULT hrMastererror, DWORD dwCount, OPCHANDLE * phClientItems, VARIANT * pvValues, WORD * pwQualities, FILETIME * pftTimeStamps, HRESULT * pErrors)
	{
        // Original code.
		//HRESULT hr = S_OK;
		//T * pThis = static_cast<T *>(this);
		//int cConnections = m_vec.GetSize();

		//for (int iConnection = 0; iConnection < cConnections; iConnection++)
		//{
		//	pThis->Lock();
		//	CComPtr<IUnknown> punkConnection = m_vec.GetAt(iConnection);
		//	pThis->Unlock();

		//	IOPCDataCallback * pConnection = static_cast<IOPCDataCallback *>(punkConnection.p);

		//	if (pConnection)
		//	{
		//		hr = pConnection->OnDataChange(dwTransid, hGroup, hrMasterquality, hrMastererror, dwCount, phClientItems, pvValues, pwQualities, pftTimeStamps, pErrors);
		//	}
		//}
		//return hr;

        // Custom new code.
        HRESULT hr = S_OK;
        T * pThis = static_cast<T *>(this);

        // Get number of connections.
        int cConnections = pThis->m_nConnectionNumber;
        // Fire OnDataChange for every connection.
        for (size_t iConnection = 0; iConnection < cConnections; iConnection++)
        {
            pThis->Lock();
            // Get IUnknown pointer of connection.
            CComPtr<IUnknown> punkConnection = pThis->m_pConnectionIUnknown[iConnection];
            pThis->Unlock();
            // Convert IUnknown pointer to IOPCDataCallback pointer.
            IOPCDataCallback * pConnection = static_cast<IOPCDataCallback *>(punkConnection.p);
            if (pConnection)
            {
                // Call IOPCDataCallback's OnDataChange function.
                hr = pConnection->OnDataChange(dwTransid, hGroup, hrMasterquality, hrMastererror, dwCount, phClientItems, pvValues, pwQualities, pftTimeStamps, pErrors);
            }
        }
        return hr;
	}
    // Auto-generated code.
	HRESULT Fire_OnReadComplete(DWORD dwTransid, OPCHANDLE hGroup, HRESULT hrMasterquality, HRESULT hrMastererror, DWORD dwCount, OPCHANDLE * phClientItems, VARIANT * pvValues, WORD * pwQualities, FILETIME * pftTimeStamps, HRESULT * pErrors)
	{
		HRESULT hr = S_OK;
		T * pThis = static_cast<T *>(this);
		int cConnections = m_vec.GetSize();

		for (int iConnection = 0; iConnection < cConnections; iConnection++)
		{
			pThis->Lock();
			CComPtr<IUnknown> punkConnection = m_vec.GetAt(iConnection);
			pThis->Unlock();

			IOPCDataCallback * pConnection = static_cast<IOPCDataCallback *>(punkConnection.p);

			if (pConnection)
			{
				hr = pConnection->OnReadComplete(dwTransid, hGroup, hrMasterquality, hrMastererror, dwCount, phClientItems, pvValues, pwQualities, pftTimeStamps, pErrors);
			}
		}
		return hr;
	}
    // Auto-generated code.
	HRESULT Fire_OnWriteComplete(DWORD dwTransid, OPCHANDLE hGroup, HRESULT hrMastererr, DWORD dwCount, OPCHANDLE * pClienthandles, HRESULT * pErrors)
	{
		HRESULT hr = S_OK;
		T * pThis = static_cast<T *>(this);
		int cConnections = m_vec.GetSize();

		for (int iConnection = 0; iConnection < cConnections; iConnection++)
		{
			pThis->Lock();
			CComPtr<IUnknown> punkConnection = m_vec.GetAt(iConnection);
			pThis->Unlock();

			IOPCDataCallback * pConnection = static_cast<IOPCDataCallback *>(punkConnection.p);

			if (pConnection)
			{
				hr = pConnection->OnWriteComplete(dwTransid, hGroup, hrMastererr, dwCount, pClienthandles, pErrors);
			}
		}
		return hr;
	}
    // Auto-generated code.
	HRESULT Fire_OnCancelComplete(DWORD dwTransid, OPCHANDLE hGroup)
	{
		HRESULT hr = S_OK;
		T * pThis = static_cast<T *>(this);
		int cConnections = m_vec.GetSize();

		for (int iConnection = 0; iConnection < cConnections; iConnection++)
		{
			pThis->Lock();
			CComPtr<IUnknown> punkConnection = m_vec.GetAt(iConnection);
			pThis->Unlock();

			IOPCDataCallback * pConnection = static_cast<IOPCDataCallback *>(punkConnection.p);

			if (pConnection)
			{
				hr = pConnection->OnCancelComplete(dwTransid, hGroup);
			}
		}
		return hr;
	}
};

